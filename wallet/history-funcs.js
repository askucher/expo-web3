// Generated by LiveScript 1.6.0
(function(){
  var ref$, sortBy, reverse, filter, map, find, moment, navigate, react, removeTx, getTransactionInfo, web3, toJS, confirm, prompt, applyTransactions, getLang, icons;
  ref$ = require('prelude-ls'), sortBy = ref$.sortBy, reverse = ref$.reverse, filter = ref$.filter, map = ref$.map, find = ref$.find;
  moment = require('moment');
  navigate = require('./navigate.js');
  react = require('react');
  removeTx = require('./pending-tx.js').removeTx;
  getTransactionInfo = require('./api.js').getTransactionInfo;
  web3 = require('./web3.js');
  toJS = require('mobx').toJS;
  ref$ = require('./pages/confirmation.js'), confirm = ref$.confirm, prompt = ref$.prompt;
  applyTransactions = require('./apply-transactions.js');
  getLang = require('./get-lang.js');
  icons = require('./icons.js');
  module.exports = function(store, web3t){
    var ago, date, filt, lang, arrow, arrowLg, sign, goBack, isActive, switchFilter, switchTypeIn, switchTypeOut, deletePendingTx, transactionInfo;
    if (store == null || web3t == null) {
      return null;
    }
    ago = function(time){
      return moment(time * 1000).fromNow();
    };
    date = function(time){
      return moment(time * 1000).format();
    };
    filt = store.current.filter;
    lang = getLang(store);
    arrow = function(type){
      switch (false) {
      case type !== 'IN':
        return lang['in'] + "";
      default:
        return lang.out + "";
      }
    };
    arrowLg = function(type){
      switch (false) {
      case type !== 'IN':
        return icons.get + "";
      default:
        return icons.send + "";
      }
    };
    sign = function(type){
      switch (false) {
      case type !== 'IN':
        return '+';
      default:
        return '-';
      }
    };
    goBack = function(){
      var prev, page;
      if (store.pages.length <= 1) {
        return null;
      }
      store.pages.splice(-1, 1);
      prev = store.pages[store.pages.length - 1];
      page = prev != null ? prev : 'wallets';
      return navigate(store, web3t, page);
    };
    isActive = function(value){
      if (in$(value, filt)) {
        return 'active';
      } else {
        return '';
      }
    };
    switchFilter = curry$(function(value, event){
      if (!in$(value, filt)) {
        filt.push(value);
      } else {
        filt.splice(filt.indexOf(value), 1);
      }
      return applyTransactions(store);
    });
    switchTypeIn = switchFilter('IN');
    switchTypeOut = switchFilter('OUT');
    deletePendingTx = function(tx){
      return function(event){
        return confirm(store, "Would you like to remove pending transaction? Your balance will be increased till confirmed transaction", function(agree){
          if (!agree) {
            return;
          }
          return removeTx((import$({
            store: store
          }, tx)), function(err){
            return web3t.refresh(function(){});
          });
        });
      };
    };
    transactionInfo = function(config){
      return function(event){
        return getTransactionInfo(config, function(err, info){
          return console.log(err, info);
        });
      };
    };
    return {
      goBack: goBack,
      switchTypeIn: switchTypeIn,
      transactionInfo: transactionInfo,
      switchTypeOut: switchTypeOut,
      coins: store.coins,
      isActive: isActive,
      switchFilter: switchFilter,
      arrow: arrow,
      arrowLg: arrowLg,
      sign: sign,
      deletePendingTx: deletePendingTx,
      ago: ago
    };
  };
  function in$(x, xs){
    var i = -1, l = xs.length >>> 0;
    while (++i < l) if (x === xs[i]) return true;
    return false;
  }
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
