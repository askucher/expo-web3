// Generated by LiveScript 1.6.0
(function(){
  var support, key, yandexTranslate, ref$, objToPairs, pairsToObj, each, map, filter, writeFile, readFile, exists, lcs;
  support = require('./support.json');
  key = require('./config.json').key;
  yandexTranslate = require('yandex-translate');
  ref$ = require('prelude-ls'), objToPairs = ref$.objToPairs, pairsToObj = ref$.pairsToObj, each = ref$.each, map = ref$.map, filter = ref$.filter;
  ref$ = require('fs'), writeFile = ref$.writeFile, readFile = ref$.readFile, exists = ref$.exists;
  lcs = require('node-lcs');
  module.exports = function(arg$, cb){
    var program, filename, body, items, res, checkGrammar, keys;
    program = arg$.program, filename = arg$.filename, body = arg$.body;
    if (body == null) {
      return cb("expected body");
    }
    if (filename == null) {
      return cb("expected filename");
    }
    if (program.newword == null) {
      return cb(null, body);
    }
    items = map(function(it){
      return it[1][0];
    })(
    objToPairs(
    body.mapping));
    res = filter(function(it){
      return it === program.newword;
    })(
    items);
    if (res.length > 0) {
      return cb("`" + program.newword + "` is already exist");
    }
    res = map(function(it){
      return it.sequence;
    })(
    filter(function(it){
      return it.length > program.newword.length - 1;
    })(
    map(function(it){
      return lcs(it, program.newword);
    })(
    items)));
    if (res.length > 0) {
      return cb("Found " + res.length + " places where this word is used somehow: " + res.join(',') + ". Please check this places");
    }
    checkGrammar = function(cb){
      var translate, to;
      translate = yandexTranslate(key).translate;
      to = 'ru';
      return translate(program.newword, {
        to: to
      }, function(err, data){
        var translation, to;
        if (err != null) {
          return cb(err);
        }
        translation = data.text[0];
        to = 'en';
        return translate(translation, {
          to: to
        }, function(err, data){
          var origin;
          if (err != null) {
            return cb(err);
          }
          origin = data.text[0];
          if (origin === program.newword) {
            return cb(null);
          }
          return cb("Word is not perfect. `" + program.newword + "` -> " + translation + " -> " + origin);
        });
      });
    };
    keys = filter(function(it){
      return it[0] === program.newword.toLowerCase();
    })(
    objToPairs(
    body.mapping));
    if (keys.length > 0) {
      return cb("this key is already availabe");
    }
    console.log('add', program.newword);
    body.mapping[program.newword.toLowerCase()] = [program.newword];
    return cb(null, body);
  };
}).call(this);
