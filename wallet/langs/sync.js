// Generated by LiveScript 1.6.0
(function(){
  var Spreadsheet, oauth2, langs, ref$, objToPairs, map, zip, pairsToObj, find, each, writeFile, opts, spreadsheet, buildRow, addNewColumnToDrive, updateFromDrive, syncRow, saveLangsUpdated, syncAll, walletRows, slice$ = [].slice;
  Spreadsheet = require('read-write-google-spreadsheet');
  oauth2 = require('./config.json').oauth2;
  langs = require('./langs.json');
  ref$ = require('prelude-ls'), objToPairs = ref$.objToPairs, map = ref$.map, zip = ref$.zip, pairsToObj = ref$.pairsToObj, find = ref$.find, each = ref$.each;
  writeFile = require('fs').writeFile;
  opts = {
    debug: true,
    spreadsheetId: '1CsISZgog2swmXOarx418BNN-Zy_9zBptWOXqsutzRWs',
    worksheetName: 'Response',
    worksheetId: 'od6',
    oauth2: oauth2
  };
  spreadsheet = new Spreadsheet(opts);
  buildRow = curry$(function(langs, lang){
    var name, values, headers, pairs, allPairs;
    name = lang[0], values = lang[1];
    headers = langs.languages;
    pairs = zip(headers, values);
    allPairs = [["key", name]].concat(pairs);
    return pairsToObj(allPairs);
  });
  addNewColumnToDrive = function(headers, googleRow, googleRowIndex, localRow, cb){
    var updatedRow, updateLangs;
    updatedRow = (import$({}, googleRow));
    updateLangs = function(arg$){
      var name, value, index;
      name = arg$[0], value = arg$[1];
      if (name === 'key') {
        return;
      }
      index = headers.indexOf(name);
      if (index === -1) {
        return;
      }
      if (updatedRow[name].length === 0) {
        return updatedRow[name] = localRow[index];
      }
    };
    each(updateLangs)(
    objToPairs(
    googleRow));
    if (JSON.stringify(updatedRow) === JSON.stringify(googleRow)) {
      return cb(null);
    }
    return spreadsheet.updateRow((import$({
      row: googleRowIndex
    }, updatedRow)), function(err){
      return cb(null);
    });
  };
  updateFromDrive = function(googleRow, googleRowIndex, langs, cb){
    var lang, headers, updateLangs;
    if (googleRow == null) {
      return cb(null);
    }
    lang = langs.mapping[googleRow.key];
    if (lang == null) {
      return cb("not exists");
    }
    headers = langs.languages;
    updateLangs = function(arg$){
      var name, value, index;
      name = arg$[0], value = arg$[1];
      if (name === 'key') {
        return;
      }
      index = headers.indexOf(name);
      if (index === -1) {
        return;
      }
      if (lang[index].length > 0 && value.length > 0) {
        return lang[index] = value;
      }
    };
    each(updateLangs)(
    objToPairs(
    googleRow));
    return addNewColumnToDrive(headers, googleRow, googleRowIndex, lang, function(err){
      if (err != null) {
        return cb(err);
      }
      return cb(null);
    });
  };
  syncRow = function(googleRows, langs, walletRow, cb){
    var alreadyThere, alreadyThereIndex;
    console.log('sync-row', walletRow.key);
    alreadyThere = find(function(it){
      return it.key === walletRow.key;
    })(
    googleRows);
    alreadyThereIndex = googleRows.indexOf(alreadyThere);
    if (alreadyThere != null) {
      return updateFromDrive(alreadyThere, alreadyThereIndex, langs, cb);
    }
    return spreadsheet.addNewRow(walletRow, function(err){
      if (err != null) {
        return cb(err);
      }
      return cb(null);
    });
  };
  saveLangsUpdated = function(langs, cb){
    return writeFile("./langs/langs.updated.json", JSON.stringify(langs, null, 4), function(err){
      if (err != null) {
        return cb(err);
      }
      return cb(null);
    });
  };
  syncAll = curry$(function(googleRows, langs, arg$, cb){
    var walletRow, walletRows;
    walletRow = arg$[0], walletRows = slice$.call(arg$, 1);
    if (walletRow == null) {
      return saveLangsUpdated(langs, cb);
    }
    return syncRow(googleRows, langs, walletRow, function(err){
      if (err != null) {
        return cb(err);
      }
      return syncAll(googleRows, langs, walletRows, function(err){
        if (err != null) {
          return cb(err);
        }
        return cb(null);
      });
    });
  });
  walletRows = map(buildRow(langs))(
  objToPairs(
  langs.mapping));
  module.exports = function(arg$, cb){
    var program;
    program = arg$.program;
    if (program.sync == null) {
      return cb(null);
    }
    return spreadsheet.getAllRows(function(err, googleRows){
      if (err != null) {
        return cb(err);
      }
      return syncAll(googleRows, langs, walletRows, function(err){
        if (err != null) {
          return cb(err);
        }
        return cb(null, 'done');
      });
    });
  };
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
