// Generated by LiveScript 1.6.0
(function(){
  var yandexTranslate, support, key, ref$, objToPairs, pairsToObj, each, map, filter, writeFile, readFile, exists, cb, filename, translate, translateLine, translatePairs, getNewFields, translateObject, saveJson, getItem, translateLang, translateAll, slice$ = [].slice;
  yandexTranslate = require('yandex-translate');
  support = require('./support.json');
  key = require('./config.json').key;
  ref$ = require('prelude-ls'), objToPairs = ref$.objToPairs, pairsToObj = ref$.pairsToObj, each = ref$.each, map = ref$.map, filter = ref$.filter;
  ref$ = require('fs'), writeFile = ref$.writeFile, readFile = ref$.readFile, exists = ref$.exists;
  cb = console.log;
  filename = './langs/langs.json';
  translate = yandexTranslate(key).translate;
  translateLine = function(line, to, cb){
    console.log('translate', line, to);
    return translate(line, {
      to: to
    }, function(err, data){
      var res, ref$;
      if (err != null) {
        return cb(err);
      }
      res = (ref$ = data.text) != null ? ref$[0] : void 8;
      if (res == null) {
        return cb("Cannot translate " + line + " -> " + to);
      }
      console.log("en -> " + to, line);
      return cb(null, res);
    });
  };
  translatePairs = function(arg$, to, cb){
    var pair, rest;
    pair = arg$[0], rest = slice$.call(arg$, 1);
    if (pair == null) {
      return cb(null, []);
    }
    return translateLine(pair[1], to, function(err, item){
      var newPair;
      if (err != null) {
        return cb(err);
      }
      newPair = [pair[0], item];
      return translatePairs(rest, to, function(err, allRest){
        var all;
        if (err != null) {
          return cb(err);
        }
        all = [newPair].concat(allRest);
        return cb(null, all);
      });
    });
  };
  getNewFields = function(newData, to, cb){
    var res;
    res = map(function(it){
      return it[0];
    })(
    filter(function(it){
      return it[1] == null;
    })(
    objToPairs(
    newData)));
    return cb(null, res);
  };
  translateObject = function(setFrom, setTo, to, cb){
    console.log('check', to);
    return getNewFields(setTo, to, function(err, newFields){
      var enFields;
      if (err != null) {
        return cb(err);
      }
      if (newFields.length === 0) {
        return cb(null, setTo);
      }
      enFields = filter(function(it){
        return in$(it[0], newFields);
      })(
      objToPairs(
      setFrom));
      return translatePairs(enFields, to, function(err, translated){
        var items;
        if (err != null) {
          return cb(err);
        }
        items = pairsToObj(
        translated);
        importAll$(setTo, items);
        return cb(null, setTo);
      });
    });
  };
  saveJson = function(filename, json, cb){
    var result;
    result = JSON.stringify(json, null, 4);
    return writeFile(filename, result, function(err){
      return cb(err);
    });
  };
  getItem = function(data, lang){
    var index;
    index = data.languages.indexOf(lang);
    return pairsToObj(
    map(function(it){
      return [it[0], it[1][index]];
    })(
    objToPairs(
    data.mapping)));
  };
  translateLang = function(filename, to, data, cb){
    var setFrom, setTo;
    setFrom = getItem(data, 'en');
    setTo = getItem(data, to);
    return translateObject(setFrom, setTo, to, function(err, result){
      var index, updateItem;
      if (err != null) {
        return cb(err);
      }
      index = data.languages.indexOf(to);
      updateItem = function(arg$){
        var name, value;
        name = arg$[0], value = arg$[1];
        if (data.mapping[name][index] === result[name]) {
          return;
        }
        return data.mapping[name][index] = result[name];
      };
      each(updateItem)(
      objToPairs(
      data.mapping));
      return saveJson(filename, data, function(err){
        return cb(null);
      });
    });
  };
  translateAll = function(filename, arg$, data, cb){
    var lang, rest;
    lang = arg$[0], rest = slice$.call(arg$, 1);
    if (lang == null) {
      return cb(null);
    }
    return translateLang(filename, lang, data, function(err){
      if (err != null) {
        return cb(err);
      }
      return translateAll(filename, rest, data, function(err){
        if (err != null) {
          return cb(err);
        }
        return cb(null);
      });
    });
  };
  module.exports = translateAll;
  function in$(x, xs){
    var i = -1, l = xs.length >>> 0;
    while (++i < l) if (x === xs[i]) return true;
    return false;
  }
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
