// Generated by LiveScript 1.6.0
(function(){
  var navigate, seedmem, bip39, confirm, ref$, words, map, filter, join, getLang, clean, fix, notInDictionary;
  navigate = require('./navigate.js');
  seedmem = require('./seed.js');
  bip39 = require('../web3t/providers/deps.js').bip39;
  confirm = require('./pages/confirmation.js').confirm;
  ref$ = require('prelude-ls'), words = ref$.words, map = ref$.map, filter = ref$.filter, join = ref$.join;
  getLang = require('./get-lang.js');
  clean = function(it){
    var ref$;
    return (ref$ = it.match(/[a-z]+/)) != null ? ref$[0] : void 8;
  };
  fix = compose$(words, map(clean), filter(function(it){
    return it != null;
  }), join(" "));
  notInDictionary = function(word){
    return !in$(word, bip39.wordlists.EN);
  };
  module.exports = function(store, web3t){
    var lang, generateSeed, next, verifySeed, save;
    if (store == null || web3t == null) {
      return null;
    }
    lang = getLang(store);
    generateSeed = function(){
      var seed;
      seed = bip39.generateMnemonic() + ' ' + bip39.generateMnemonic();
      store.current.seedWords = seed.split(' ').map(function(it){
        return {
          part: it
        };
      });
      return store.current.seedGenerated = true;
    };
    next = function(){
      return navigate(store, web3t, ':init');
    };
    verifySeed = function(cb){
      var empty, i$, to$, i, e;
      empty = filter(function(it){
        return it.part.length === 0;
      })(
      store.current.seedWords);
      if (empty.length !== 0) {
        store.current.alert = "Please fill all words";
        return cb("cancelled");
      }
      try {
        for (i$ = 0, to$ = store.current.seedWords.length - 11; i$ <= to$; i$ += 12) {
          i = i$;
          bip39.mnemonicToEntropy(store.current.seedWords.slice(i, i + 12).map(fn$).join(" "));
        }
        return cb(null);
      } catch (e$) {
        e = e$;
        return confirm(store, "Seed phrase checksum not match. Do you want to continue?", function(res){
          if (res === false) {
            return cb("cancelled");
          }
          return cb(null);
        });
      }
      function fn$(it){
        return it.part;
      }
    };
    save = function(){
      return verifySeed(function(err){
        if (err != null) {
          return;
        }
        seedmem.mnemonic = store.current.seedWords.map(function(it){
          return it.part;
        }).join(' ');
        store.current.savedSeed = true;
        seedmem.set(seedmem.mnemonic);
        return next();
      });
    };
    return {
      save: save,
      generateSeed: generateSeed,
      next: next
    };
  };
  function compose$() {
    var functions = arguments;
    return function() {
      var i, result;
      result = functions[0].apply(this, arguments);
      for (i = 1; i < functions.length; ++i) {
        result = functions[i](result);
      }
      return result;
    };
  }
  function in$(x, xs){
    var i = -1, l = xs.length >>> 0;
    while (++i < l) if (x === xs[i]) return true;
    return false;
  }
}).call(this);
