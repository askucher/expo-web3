// Generated by LiveScript 1.6.0
(function(){
  var ref$, each, find, web3, round5, getPrimaryInfo, navigate, applyTransactions, times, transaction;
  ref$ = require('prelude-ls'), each = ref$.each, find = ref$.find;
  web3 = require('./web3.js');
  round5 = require('./round5.js');
  getPrimaryInfo = require('./get-primary-info.js');
  navigate = require('./navigate.js');
  applyTransactions = require('./apply-transactions.js');
  times = require('./math.js').times;
  transaction = require('mobx').transaction;
  module.exports = function(store, web3t, wallets, wallet){
    var ref$, index, send, receive, usdRate, ref1$, uninstall, expand, active, big, balance, balanceUsd, pending, style, buttonStyle, last;
    if (store == null || web3t == null || wallets == null || (wallet != null ? (ref$ = wallet.coin) != null ? ref$.token : void 8 : void 8) == null) {
      return null;
    }
    index = wallets.indexOf(wallet);
    if (store == null || wallet == null) {
      return null;
    }
    send = curry$(function(wallet, event){
      var sendTransaction, to, value;
      if (wallet == null) {
        return alert("Not yet loaded");
      }
      if (web3t[wallet.coin.token] == null) {
        return alert("Not yet loaded");
      }
      sendTransaction = web3t[wallet.coin.token].sendTransaction;
      to = "";
      value = 0;
      return sendTransaction({
        to: to,
        value: value
      }, function(err){});
    });
    receive = curry$(function(wallet, event){
      var network;
      event.stopPropagation();
      store.current.sendMenuOpen = false;
      network = wallet.coin[store.current.network];
      importAll$(store.current.invoice, {
        coin: wallet.coin,
        wallet: wallet,
        network: network
      });
      return navigate(store, web3t, 'invoice');
    });
    usdRate = (ref1$ = wallet != null ? wallet.usdRate : void 8) != null ? ref1$ : 0;
    uninstall = function(e){
      var walletIndex;
      e.stopPropagation();
      walletIndex = store.current.account.wallets.indexOf(wallet);
      if (walletIndex === -1) {
        return;
      }
      store.current.account.wallets.splice(walletIndex, 1);
      return web3t.uninstall(wallet.coin.token, function(){
        return web3t.refresh(function(){
          return store.current.walletIndex = 0;
        });
      });
    };
    expand = function(e){
      e.stopPropagation();
      if (store.current.walletIndex === index) {
        return send(wallet, {});
      }
      store.current.walletIndex = index;
      store.current.filter.length = 0;
      store.current.filter = ['IN', 'OUT', wallet.coin.token];
      return applyTransactions(store);
    };
    active = index === store.current.walletIndex ? 'active' : '';
    big = (function(){
      switch (false) {
      case index !== store.current.walletIndex:
        return 'big';
      case !(wallets.length < 3):
        return 'big';
      default:
        return "";
      }
    }());
    balance = round5(wallet.balance) + ' ' + wallet.coin.token.toUpperCase();
    balanceUsd = times(wallet.balance, usdRate);
    pending = round5(wallet.pendingSent) + ' ' + wallet.coin.token.toUpperCase();
    style = getPrimaryInfo(store);
    buttonStyle = {
      color: style.app.text,
      background: style.app.background + "36",
      border: "1px solid " + style.app.border
    };
    last = (function(){
      switch (false) {
      case !(wallets.length < 4 && index + 1 === wallets.length):
        return 'last';
      default:
        return "";
      }
    }());
    return {
      buttonStyle: buttonStyle,
      wallet: wallet,
      active: active,
      big: big,
      balance: balance,
      balanceUsd: balanceUsd,
      pending: pending,
      send: send,
      expand: expand,
      usdRate: usdRate,
      last: last,
      receive: receive,
      uninstall: uninstall
    };
  };
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
